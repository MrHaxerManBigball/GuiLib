if not game:IsLoaded() then game.Loaded:Wait() end 
local loadingGui 
if not gethui then loadingGui = game:GetService("CoreGui") else loadingGui = gethui() end 
if getgenv().executed then return error("Already Executed") end 
if not isfolder("testlib") then makefolder("testlib") end 
if not isfolder("testlib/config") then makefolder("testlib/config") end 
if not isfolder("testlib/games") then makefolder("testlib/games") end
if not isfolder("testlib/config/"..game.GameId) then makefolder("testlib/config/"..game.GameId) end 
getgenv().executed = true
local guiLib = {}
getgenv().testing = guiLib
guiLib.moduletable = {}
local Players = game:GetService("Players") 
local uis = game:GetService("UserInputService")
local http = game:GetService("HttpService")
function code(b) 
	b() 
end 
local letters = {"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", 1,2,3,4,5,6,7,8,9,0, "!", "@", "#","$","%","^","&","*","(",")","_","-","=","+", "|", "{", "}", ".", ",", ";", ":","<",">","'",'"', "`", "?","/",}
function guiLib:randomString(amount)
    local returnedString = ""
    for i = 1, amount do 
        if math.random(2) == 2 then 
            returnedString = returnedString..string.lower(letters[math.random(#letters)])
        else 
            returnedString = returnedString..letters[math.random(#letters)]
        end 
    end 
    return returnedString
end

guiLib.binds = getgenv().binds or {}
if not getgenv().lplr then getgenv().lplr = Players.LocalPlayer end 
guiLib.isAlive = function(plr)
	return plr and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Humanoid") and plr.Character:FindFirstChild("Humanoid").Health > 0 
end
function guiLib:Enabled(module)
	return ModuleOn[tostring(module)] or false 
end 
guiLib.isTeammate =  function(plr) 
	return plr.Team == lplr.Team and lplr.Team
end

guiLib.functions = {}
function getModuleFunc(moduletofunc)
	local returnedFunc
	for i,v in next, guiLib.functions do 
		for i2,v2 in next, v do 
			if v.Name == moduletofunc then 
				returnedFunc = v["Function"]
				break
			end
		end 
	end
	return returnedFunc
end
local mouse = lplr:GetMouse()
guiLib.Boney = Instance.new("ScreenGui", loadingGui)
guiLib.Boney.Enabled = false 
local TextButton = Instance.new("TextButton")
guiLib.Boney.Name = guiLib:randomString(50)
guiLib.Boney.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
guiLib.Boney.ResetOnSpawn = false
guiLib.unj = uis.InputBegan:Connect(function(input) 
	if input.KeyCode == Enum.KeyCode.RightShift then 
		guiLib.Boney.Enabled = not guiLib.Boney.Enabled
	end 
end) 
local WorldWindow = Instance.new("TextLabel", guiLib.Boney)
WorldWindow.Name = guiLib:randomString(50)
WorldWindow.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
WorldWindow.BackgroundTransparency = 0.3
WorldWindow.Position = UDim2.new(0.0308897775, 0, 0.0302419364, 0)
WorldWindow.Size = UDim2.new(0, 200, 0, 50)
WorldWindow.Font = Enum.Font.Highway
WorldWindow.Text = "World"
WorldWindow.TextColor3 = Color3.fromRGB(0, 0, 0)
WorldWindow.TextSize = 25
WorldWindow.Active = true 
WorldWindow.Draggable = true 
WorldWindow.BorderSizePixel = 0 
local CombatWindow = Instance.new("TextLabel", guiLib.Boney)
CombatWindow.Name = guiLib:randomString(50)
CombatWindow.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
CombatWindow.BackgroundTransparency = 0.3
CombatWindow.Position = UDim2.new(WorldWindow.Position) + UDim2.new(0.15,0,0.031)
CombatWindow.Size = UDim2.new(0, 200, 0, 50)
CombatWindow.Font = Enum.Font.Highway
CombatWindow.Text = "Combat"
CombatWindow.TextColor3 = Color3.fromRGB(0, 0, 0)
CombatWindow.TextSize = 25
CombatWindow.Active = true 
CombatWindow.Draggable = true 
CombatWindow.BorderSizePixel = 0 
local UtilityWindow = Instance.new("TextLabel", guiLib.Boney)
UtilityWindow.Name = guiLib:randomString(50)
UtilityWindow.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
UtilityWindow.BackgroundTransparency = 0.3
UtilityWindow.Position = UDim2.new(WorldWindow.Position) + UDim2.new(0.3,0,0.031)
UtilityWindow.Size = UDim2.new(0, 200, 0, 50)
UtilityWindow.Font = Enum.Font.Highway
UtilityWindow.Text = "Utility"
UtilityWindow.TextColor3 = Color3.fromRGB(0, 0, 0)
UtilityWindow.TextSize = 25
UtilityWindow.Active = true 
UtilityWindow.Draggable = true 
UtilityWindow.BorderSizePixel = 0 
local MovementWindow = Instance.new("TextLabel", guiLib.Boney)
MovementWindow.Name = guiLib:randomString(50)
MovementWindow.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
MovementWindow.BackgroundTransparency = 0.3
MovementWindow.Position = UDim2.new(WorldWindow.Position) + UDim2.new(0.45,0,0,40)
MovementWindow.Size = UDim2.new(0, 200, 0, 50)
MovementWindow.Font = Enum.Font.Highway
MovementWindow.Text = "Movement"
MovementWindow.TextColor3 = Color3.fromRGB(0, 0, 0)
MovementWindow.TextSize = 25
MovementWindow.Active = true 
MovementWindow.Draggable = true
MovementWindow.BorderSizePixel = 0 
local RenderWindow = Instance.new("TextLabel", guiLib.Boney)
RenderWindow.Name = guiLib:randomString(50)
RenderWindow.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
RenderWindow.BackgroundTransparency = 0.3
RenderWindow.Position = UDim2.new(WorldWindow.Position) + UDim2.new(0.6,0,0,49)
RenderWindow.Size = UDim2.new(0, 200, 0, 50)
RenderWindow.Font = Enum.Font.Highway
RenderWindow.Text = "Render"
RenderWindow.TextColor3 = Color3.fromRGB(0, 0, 0)
RenderWindow.TextSize = 25
RenderWindow.Active = true 
RenderWindow.Draggable = true 
RenderWindow.BorderSizePixel = 0 
ModuleAmmount = {}
ModuleOn = {}
guiLib.DropDownValue = {"Value" == 0}
function guiLib:GetDropDownValue(dropped) 
	return guiLib.DropDownValue[dropped]
end 
ModuleAmmount.WorldWindow = 0  
ModuleAmmount.CombatWindow = 0
ModuleAmmount.UtilityWindow = 0
ModuleAmmount.MovementWindow = 0
ModuleAmmount.RenderWindow = 0 
guiLib.disconnectfuncs = {}
local connection1, connection2, connection3, connection4, realwindow, wname
function guiLib:CreateModule(tbl)
	realwindow = nil
	table.insert(guiLib.moduletable, tbl["Name"])
	table.insert(guiLib.functions, tbl)
	if tbl["Window"] == "World" then
		realwindow = WorldWindow
        wname = "WorldWindow"
	elseif tbl["Window"] == "Combat" then
		realwindow = CombatWindow 
        wname = "CombatWindow"
	elseif tbl["Window"] == "Utility" then 
		realwindow = UtilityWindow
        wname = "UtilityWindow"
	elseif tbl["Window"] == "Movement" then 
		realwindow = MovementWindow 
        wname = "MovementWindow"
	elseif tbl["Window"] == "Render" then 
		realwindow = RenderWindow
        wname = "RenderWindow"
	end 
	ModuleAmmount[wname] += 1
	--local corner = Instance.new("UICorner", realwindow  or WorldWindow)
	local module = Instance.new("TextButton", realwindow or WorldWindow)
	--corner:Clone().Parent = module
	module.BackgroundColor3 = Color3.fromRGB(36, 38, 42)
	module.BackgroundTransparency = 0.5
	module.Position = UDim2.new(realwindow.Position) + UDim2.new(0,0,1 * ModuleAmmount[wname])
	module.Size = UDim2.new(0, 200, 0, 50)
	module.Font = Enum.Font.SourceSans
	module.TextStrokeColor3 = Color3.fromRGB(255, 0, 255)
	module.TextColor3 = Color3.fromRGB(255, 255, 255)
	module.TextSize = 18
	module.TextXAlignment = "Left"
	module.Text = " "..tostring(tbl["Name"])
	module.TextTransparency = 0 
	module.BorderSizePixel = 0 
    	module.Name = guiLib:randomString(50)
	if not ModuleOn[tbl["Name"]] then 
            if isfile("testlib/config/"..game.GameId.."/"..tbl["Name"]..".txt") then
           	 if readfile("testlib/config/"..game.GameId.."/"..tbl["Name"]..".txt") == "true" then guiLib:Enable(tbl["Name"]) guiLib.moduletable[tbl["Name"]] = true end 
        	else 
            		ModuleOn[tbl["Name"]] = false
	    		writefile("testlib/config/"..game.GameId.."/"..tbl["Name"]..".txt", "false") 
        	end
	end
	if tbl["Dropdown"] then 
		local dropdown2 = Instance.new("TextBox", realwindow) 
		--corner:Clone().Parent = dropdown2
		dropdown2.Position = UDim2.new(module.Position) + UDim2.new(0.225,0.3,1.05) 
		dropdown2.TextSize = 10
		dropdown2.BackgroundTransparency = 0.6 
		dropdown2.BorderSizePixel = 0 
		dropdown2.TextTransparency = 1
		dropdown2.TextEditable = false 
		dropdown2.LayoutOrder = 0
		dropdown2.Size = UDim2.new(0,0,0)
		dropdown2.Name = guiLib:randomString(50)
		dropdown2.BackgroundColor3 = Color3.fromRGB(36, 38, 42)
		dropdown2.TextColor3 = Color3.fromRGB(255, 255, 255)
		if tbl["Dropdown"]["Default"] then 
			guiLib.DropDownValue[tbl["Name"]] = tbl["Dropdown"]["Default"]
		end
		if not guiLib.DropDownValue[tbl["Name"]] then 
			guiLib.DropDownValue[tbl["Name"]] = 0 
		end
		connection1 = dropdown2:GetPropertyChangedSignal("Text"):Connect(function(balling) 
			table.insert(guiLib.disconnectfuncs, connection1)
			pcall(function()
				guiLib.DropDownValue[tbl["Name"]] = dropdown2.Text
				if dropdown2 and dropdown2.Text and tbl["Dropdown"] and typeof(dropdown2.Text) == tbl["Dropdown"]["Type"] and tbl["Dropdown"]["Min"] and tonumber(dropdown2.Text) < tbl["Dropdown"]["Min"] then 
					dropdown2.Text = tbl["Dropdown"]["Min"]
					guiLib.DropDownValue[tbl["Name"]] = tbl["Dropdown"]["Min"]
				elseif dropdown2 and tbl["Dropdown"] and tbl["Dropdown"]["Max"] and tonumber(dropdown2.Text) > tonumber(tbl["Dropdown"]["Max"]) then
					dropdown2.Text = tbl["Dropdown"]["Max"]
					guiLib.DropDownValue[tbl["Name"]] = tbl["Dropdown"]["Max"]
				end 
			end)
		end) 
		connection2 = module.MouseButton2Down:Connect(function(right) 
			table.insert(guiLib.disconnectfuncs, connection2)
			if dropdown2.TextEditable then 
				dropdown2.BackgroundTransparency = 1 
				dropdown2.TextTransparency = 1
				dropdown2.TextEditable = false  
				dropdown2.Selectable = false 
				module.TextSize = 18
				dropdown2.Size = UDim2.new(0,0,0)
			else 
				dropdown2.Text = guiLib.DropDownValue[tbl["Name"]] or "Empty"
				dropdown2.BackgroundTransparency = 0 
				dropdown2.TextTransparency = 0
				dropdown2.TextEditable = true 
				dropdown2.Selectable = true
				module.TextSize = 15
				dropdown2.Size = UDim2.new(0,123,0,50) 
			end 
		end) 
	end 
	connection3 = uis.InputBegan:Connect(function(input) 
		table.insert(guiLib.disconnectfuncs, connection3)
		if input.KeyCode == guiLib.binds[tbl["Name"]] and not uis:GetFocusedTextBox() then 
			if ModuleOn[tbl["Name"]] then 
				ModuleOn[tbl["Name"]] = false 
				guiLib:Notify(tbl["Name"], "Disabled", 1)
				writefile("testlib/config/"..game.GameId.."/"..tbl["Name"]..".txt", "false")
				module.TextSize = 18
				module.BackgroundColor3 = Color3.fromRGB(36, 38, 42)
				task.spawn(function()
					code(tbl["Function"])
				end)
			else 
				ModuleOn[tbl["Name"]] = true 
				guiLib:Notify(tbl["Name"], "Enabled", 1)
				writefile("testlib/config/"..game.GameId.."/"..tbl["Name"]..".txt", "true")
				module.BackgroundColor3 = Color3.fromRGB(83, 33, 153)
				task.spawn(function()
					code(tbl["Function"])
				end)
			end 
		end 
	end) 
	task.spawn(function()
		module.MouseButton1Down:Connect(tbl["Function"]) 
	end)
	connection4 = module.MouseButton1Down:Connect(function(func) 
		table.insert(guiLib.disconnectfuncs, connection4)
		if ModuleOn[tbl["Name"]] then 
			ModuleOn[tbl["Name"]] = false 
			guiLib:Notify(tbl["Name"], "Disabled", 1)
			module.BackgroundColor3 = Color3.fromRGB(36, 38, 42)
		else 
			ModuleOn[tbl["Name"]] = true 
			guiLib:Notify(tbl["Name"], "Enabled", 1)
			module.BackgroundColor3 = Color3.fromRGB(83, 33, 153)
		end 
	end) 
end 

function guiLib:Disable(disablemodule)
	if ModuleOn[disablemodule] and disablemodule ~= "Uninject" then 
		ModuleOn[disablemodule] = false 
		for i,v in next, guiLib.Boney:GetDescendants() do 
			if v:IsA("TextButton") and v.Text == " "..disablemodule then 
				v.BackgroundColor3 = Color3.fromRGB(36, 38, 42)
				guiLib:Notify(disablemodule, "Disabled", 1)
				if getgenv().canSave then 
					writefile("testlib/config/"..game.GameId.."/"..disablemodule..".txt", "false")
				end
				guiLib.moduletable[disablemodule] = false
				code(getModuleFunc(disablemodule))
				break
			end 
		end 
	end 
end
function guiLib:Enable(enabledmodule)
	if  not ModuleOn[enabledmodule] then 
		ModuleOn[enabledmodule] = true 
		for i,v in next, guiLib.Boney:GetDescendants() do 
			if v:IsA("TextButton") and v.Text == " "..enabledmodule then 
				v.BackgroundColor3 = Color3.fromRGB(83, 33, 153)
				guiLib:Notify(enabledmodule, "Enabled", 1)
				if getgenv().canSave then 
				writefile("testlib/config/"..game.GameId.."/"..enabledmodule..".txt", "true")
				end
				guiLib.moduletable[enabledmodule] = true
				code(getModuleFunc(enabledmodule))
				break
			end 
		end 
	end 
end 
local notifications = 0
function guiLib:Notify(header, text, time, tweentime)
	task.spawn(function() 
		notifications += 1 
		local Notification = Instance.new("ScreenGui", loadingGui)
		local Frame = Instance.new("Frame", Notification)
		local Header = Instance.new("TextLabel", Frame)
		local Bottomtext = Instance.new("TextLabel", Frame)
		Notification.Name = guiLib:randomString(50)
		Notification.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
		Frame.BackgroundTransparency = 0.6
		Frame.Position = UDim2.new(0.897371888, 0, 0.917338729, 0)
		Frame.Size = UDim2.new(0, 270, 0, 114)
		Header.Name = guiLib:randomString(50)
		Header.BackgroundColor3 = Color3.fromRGB(111, 128, 200)
		Header.BackgroundTransparency = 0.2
		Header.Position = UDim2.new(-0.00371747208, 0, 0, 0)
		Header.Size = UDim2.new(0, 270, 0, 39)
		Header.Font = Enum.Font.SourceSans
		Header.Text = header or "Header"
		Header.TextColor3 = Color3.fromRGB(0, 0, 0)
		Header.TextSize = 25
		Header.BorderSizePixel = 0.5

		Bottomtext.Name = guiLib:randomString(50)
		Bottomtext.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Bottomtext.BackgroundTransparency = 1
		Bottomtext.Position = UDim2.new(0, 0, 0.342105269, 0)
		Bottomtext.Size = UDim2.new(0, 270, 0, 114)
		Bottomtext.Font = Enum.Font.SourceSans
		Bottomtext.Text = text or "Text"
		Bottomtext.TextColor3 = Color3.fromRGB(255, 255, 255)
		Bottomtext.TextSize = 25
		Bottomtext.TextXAlignment = Enum.TextXAlignment.Left
		Bottomtext.TextYAlignment = Enum.TextYAlignment.Top
		Bottomtext.BorderSizePixel = 0 
		Frame:TweenPosition(UDim2.new(0.85,0.1,0.8 - (notifications / 11.65),0.4), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, tweentime or 0.1, false) 
		task.wait(time) 
		notifications -= 1 
		Frame:TweenPosition(UDim2.new(0.897371888, 0, 0.917338729, 0), Enum.EasingDirection.Out, Enum.EasingStyle.Linear, tweentime or 0.1, false)
		task.wait(0.2)
		Notification:Destroy()
	end)
end
guiLib:Notify("Josiah", "Press Right-Shift to\nopen GUI", 3)
return guiLib

--[[
example 
local GuiLib = loadstring(game:HttpGet("https://raw.githubusercontent.com/MrHaxerManBigball/GuiLib/main/Lib", true))()
GuiLib:CreateModule({
    ["Name"] = "Uninject", 
    ["Window"] = "Utility", 
    ["Function"] = function() 
        if GuiLib:Enabled("Uninject") then 
            getgenv().canSave = false 
            for i,v in pairs(GuiLib.moduletable) do 
                if GuiLib:Enabled(v) then 
                    GuiLib:Disable(v)
                end 
            end 
            for i,v in pairs(GuiLib.disconnectfuncs) do 
                v:Disconnect() 
            end 
            GuiLib.unj:Disconnect()
            GuiLib.functions = {}
            GuiLib.Boney:Destroy()  
            GuiLib.moduletable = {}
            getgenv().binds = {}
            GuiLib.binds = {}
            getgenv().executed = false 
        end 
    end,
})
]]
